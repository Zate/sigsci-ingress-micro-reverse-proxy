kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv001
  labels:
    type: local
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  reclaimPolicy:
    - Recycle
  hostPath:
    path: "/kube"

---

kind: ConfigMap
apiVersion: v1
data:
  main-snippet: load_module /usr/lib/nginx/modules/ngx_http_sigsci_module.so;
metadata:
  name: nginx-configuration
  namespace: default
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/part-of: nginx-ingress-controller

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: default
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/part-of: nginx-ingress-controller

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: default
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/part-of: nginx-ingress-controller

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: default
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/part-of: nginx-ingress-controller

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/part-of: nginx-ingress-controller
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: default
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/part-of: nginx-ingress-controller
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: default
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/part-of: nginx-ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/part-of: nginx-ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: default

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: default
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/part-of: nginx-ingress-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/part-of: nginx-ingress-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-ingress-controller
        app.kubernetes.io/part-of: nginx-ingress-controller
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: nginx-ingress-serviceaccount
      containers:
        - name: nginx-ingress-controller
          image: trickyhu/sigsci-module-nginx-ingress:0.22.0
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/nginx-ingress-controller
            - --annotations-prefix=nginx.ingress.kubernetes.io
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 33
            runAsUser: 33
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: sigsci-socket
              mountPath: /var/run/
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
        - name: sigsci-agent
          image: trickyhu/sigsci-agent-alpine:latest
          volumeMounts:
            - name: sigsci-socket
              mountPath: /var/run/
          env:
            - name: SIGSCI_ACCESSKEYID
              value: REPLACE_ME_INGRESS_SITE
            - name: SIGSCI_SECRETACCESSKEY
              value: REPLACE_ME_INGRESS_SITE
      volumes:
        - name: sigsci-socket
          persistentVolumeClaim:
          claimName: ingress

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "2"
  creationTimestamp: null
  generation: 1
  labels:
    k8s-app: microservice-a
  name: microservice-a
  selfLink: /apis/extensions/v1beta1/namespaces/nginx-ingress-controller/deployments/microservice-a
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: microservice-a
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        k8s-app: microservice-a
      name: microservice-a
    spec:
      containers:
      - env:
        - name: SIGSCI_SOCKET
          value: unix:/var/run/sigsci/micro-a.sock
        - name: SIGSCI_NGINX_PORT
          value: "8282"
        image: trickyhu/sigsci-debian-nginx:latest
        imagePullPolicy: Always
        name: microservice-a
        ports:
        - containerPort: 8282
          protocol: TCP
        resources: {}
        securityContext:
          privileged: false
          procMount: Default
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/sigsci
          name: host-mount
      - env:
        - name: SIGSCI_RPC_ADDRESS
          value: unix:/var/run/sigsci/micro-a.sock
        - name: SIGSCI_HOSTNAME
          value: micro-a
        - name: SIGSCI_SECRETACCESSKEY
          value: REPLACE_ME_MICROA_SITE
        - name: SIGSCI_ACCESSKEYID
          value: REPLACE_ME_MICROA_SITE
        image: trickyhu/sigsci-agent-alpine:latest
        imagePullPolicy: Always
        name: sigsci-agent-alpine
        resources: {}
        securityContext:
          privileged: false
          procMount: Default
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/sigsci
          name: host-mount
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: host-mount
        persistentVolumeClaim:
        claimName: microservice-a

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "2"
  creationTimestamp: null
  generation: 1
  labels:
    k8s-app: microservice-b
  name: microservice-b
  selfLink: /apis/extensions/v1beta1/namespaces/nginx-ingress-controller/deployments/microservice-b
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: microservice-b
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        k8s-app: microservice-b
      name: microservice-b
    spec:
      containers:
      - env:
        - name: sigsci_rpc
          value: \/var\/run\/sigsci\/micro-b.sock
        - name: apache_port
          value: "8282"
        image: trickyhu/sigsci-apache-alpine:latest
        imagePullPolicy: Always
        name: microservice-b
        ports:
        - containerPort: 8282
          protocol: TCP
        resources: {}
        securityContext:
          privileged: false
          procMount: Default
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/sigsci
          name: host-mount
      - env:
        - name: SIGSCI_RPC_ADDRESS
          value: unix:/var/run/sigsci/micro-b.sock
        - name: SIGSCI_HOSTNAME
          value: micro-b
        - name: SIGSCI_SECRETACCESSKEY
          value: REPLACE_ME_MICROB_SITE
        - name: SIGSCI_ACCESSKEYID
          value: REPLACE_ME_MICROB_SITE
        image: trickyhu/sigsci-agent-alpine:latest
        imagePullPolicy: Always
        name: sigsci-agent-alpine
        resources: {}
        securityContext:
          privileged: false
          procMount: Default
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/sigsci
          name: host-mount
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: host-mount
        persistentVolumeClaim:
        claimName: microservice-b

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: nginx-ingress-controller
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
  - host: minikube
  - http:
      paths:
        - path: /nginx(/|$)(.*)
          backend:
            serviceName: microservice-a
            servicePort: 8282
        - path: /apache(/|$)(.*)
          backend:
            serviceName: microservice-b
            servicePort: 8282
---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "2"
  creationTimestamp: null
  generation: 1
  labels:
    k8s-app: reverse-proxy
  name: reverse-proxy
  selfLink: /apis/extensions/v1beta1/namespaces/nginx-ingress-controller/deployments/reverse-proxy
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: reverse-proxy
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        k8s-app: reverse-proxy
      name: reverse-proxy
    spec:
      containers:
      - env:
        - name: SIGSCI_REVPROXY_LISTENER
          value: example:{listener=http://0.0.0.0:80,upstreams=http://microservice-a:8282}
        - name: SIGSCI_HOSTNAME
          value: sigscirp
        - name: SIGSCI_SECRETACCESSKEY
          value: REPLACE_ME_RP_SITE
        - name: SIGSCI_ACCESSKEYID
          value: REPLACE_ME_RP_SITE
        image: trickyhu/sigsci-agent-alpine:latest
        imagePullPolicy: Always
        name: sigsci-agent-alpine
        ports:
        - containerPort: 80
          protocol: TCP
        resources: {}
        securityContext:
          procMount: Default
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30